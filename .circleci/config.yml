version: 2
jobs:
  build:
    working_directory: /app
    docker:
      - image: php:7.1-apache
        environment:
          APP_ENV: test
    steps:
       - checkout
       - run:
          name: Install system packages
          command: apt-get update && apt-get -y install zip git zlib1g-dev wget
       - run:
          name: Install PHP extensions
          command: |
            docker-php-ext-install pdo 
            docker-php-ext-install zip
       - run:
          name: Install Composer
          command: |
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            php -r "if (hash_file('SHA384', 'composer-setup.php') === trim(file_get_contents('https://composer.github.io/installer.sig'))) { echo 'Installer verified'; } else { echo 'Installer invalid'; unlink('composer-setup.php'); } echo PHP_EOL;"
            php composer-setup.php
            php -r "unlink('composer-setup.php');"
       - run:
          name: Display PHP information
          command: |
            php -v
            php composer.phar --version
       - run:
          name: Check PHP sintax
          command: find . -name \*.php -exec php -l "{}" \;
       - run:
          name: Install project dependencies
          command: |
            cd /app
            php composer.phar install
       - store_artifacts:
          path: /app
          destination: app-artifact
       - persist_to_workspace:
          root: /
          paths:
            - app

  publish:
    working_directory: /
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: /
      - run:
          name: Copy CI files to root
          command: |
             cd /app
             cp .circleci/data/.htaccess .
             cp .circleci/data/Dockerfile .
             cp .circleci/data/update-wp-config.php .
             cp .circleci/data/wait-for-mysql.sh .
      - run:
          name: Build image base for modifications
          command: |
             cd /app && ls
             docker build -t ${DOCKER_ACCOUNT}/${PROJECT_NAME}:latest .
             docker run --name newimage -d -p3306:3306 -p80:80 ${DOCKER_ACCOUNT}/${PROJECT_NAME}:latest
      - run:
          name: Wait for MySQL Service
          command: |
             docker exec -it newimage sh /app/wp-content/plugins/${PLUGIN_NAME}/wait-for-mysql.sh
             docker exec -it newimage rm /app/wp-content/plugins/${PLUGIN_NAME}/wait-for-mysql.sh
      - run:
          name: Activate and setup Plugin
          command: |
             docker exec -it newimage wp plugin activate ${PLUGIN_NAME} --allow-root
             docker exec -it newimage chmod -R 777 /app/wp-content/plugins/${PLUGIN_NAME}
             docker exec -it newimage mysql -u root -D wordpress -e "INSERT INTO wp_options (option_name,option_value) VALUES ('${PLUGIN_META_NAME}','${PLUGIN_CONFIG}');"
             docker exec -it newimage mysql -u root -D wordpress -e "UPDATE wp_options SET option_value = 'https://${STAGING_URL}' WHERE option_name IN ('siteurl','home');"
             docker exec -i newimage curl -X GET "http://localhost/wp-content/plugins/${PLUGIN_NAME}/update-wp-config.php?url=${STAGING_URL}"
             docker exec -it newimage rm /app/wp-content/plugins/${PLUGIN_NAME}/update-wp-config.php 
      - run:
          name: Clear useless files
          command: |
             docker exec -it newimage cd /app/wp-content/plugins/${PLUGIN_NAME} && \
                    rm -rf .github .circleci .plugin-data .git .gitignore .editorconfig && \ 
                    rm -rf Dockerfile update-wp-config.php wait-for-mysql.sh LICENSE *.MD
      - deploy:
          name: Commit and push Docker image
          command: |
             sleep 5 && docker stop newimage
             docker login ${DOCKER_ACCOUNT} -u ${DOCKER_USER} -p ${DOCKER_PASS}
             docker commit newimage ${DOCKER_ACCOUNT}/${PROJECT_NAME}:latest
             docker tag ${DOCKER_ACCOUNT}/${PROJECT_NAME} "${DOCKER_ACCOUNT}/${PROJECT_NAME}:latest"
             docker tag ${DOCKER_ACCOUNT}/${PROJECT_NAME} "${DOCKER_ACCOUNT}/${PROJECT_NAME}:${CIRCLE_BRANCH}"
             docker tag ${DOCKER_ACCOUNT}/${PROJECT_NAME} "${DOCKER_ACCOUNT}/${PROJECT_NAME}:${CIRCLE_SHA1:0:8}"
             docker push "${DOCKER_ACCOUNT}/${PROJECT_NAME}"
             
  deploy_staging:
    machine: true
    steps:
      - run:
          name: Send deployment webhook to Rancher
          command: |
            BODY='{"push_data":{"tag":"'"${CIRCLE_BRANCH}"'"},"repository":{"repo_name":"'"${DOCKER_ACCOUNT}/${PROJECT_NAME}"'"}}'
            curl -X POST ${RANCHER_STG_DEPLOY_URL} -H 'Content-Type: application/json' -d "${BODY}"
 
  deploy_wordpress:
    working_directory: /
    docker:
      - image: aneesv/svn-client
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: /
      - run:
          name: Get SVN repo
          command: |
            mkdir /svn && cd /svn
            svn co https://plugins.svn.wordpress.org/${PLUGIN_NAME} --username ${SVN_USER} --password ${SVN_PASS}
      - run: 
          name: Clear release and update plugin assets
          command: |
            cp -ar /app /app-released
            cd /app-released
            rm -rf .github .circleci .git .gitignore .editorconfig 
            rm -rf update-wp-config.php wait-for-mysql.sh LICENSE *.MD      
            cp /app-released/.plugin-data/README.md /app-released/README.md
            rm -rf /svn/${PLUGIN_NAME}/assets
            cp -ar /app-released/.plugin-data/assets /svn/${PLUGIN_NAME}/assets
            rm -rf /app-released/.plugin-data
      - run:
          name: Add release files 
          command: |
            cd /app-released
            VERSION_TAG="$(cat ${PLUGIN_NAME}.php | grep -i 'Version:' | cut -c12- | xargs)"
            echo "Release Number: ${VERSION_TAG}"
            cd /svn/${PLUGIN_NAME}
            if [ -d "tags/${VERSION_TAG}" ]; then rm -rf tags/${VERSION_TAG}; fi
            cp -ar /app-released tags/${VERSION_TAG}
            rm -rf trunk
            cp -ar /app-released trunk            
      - deploy:
          name: Commit and push changes 
          command: |
            cd /app-released
            VERSION_TAG="$(cat ${PLUGIN_NAME}.php | grep -i 'Version:' | cut -c12- | xargs)"
            cd /svn/${PLUGIN_NAME}
            svn cleanup .
            removed=$(svn status | sed -e '/^!/!d' -e 's/^!//')
            if [ ! -z  ${removed// } ]; then svn rm $(svn status | sed -e '/^!/!d' -e 's/^!//'); fi
            svn add --force * --auto-props --parents --depth infinity -q
            svn commit . --force-log -m "Auto generate release ${VERSION_TAG}" --no-auth-cache --username ${SVN_USER} --password ${SVN_PASS}
            
workflows:
  version: 2
  build_publish_deploy:
    jobs:
      - build
      - publish:
          context: DockerRegistry
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy_staging:
          requires:
            - publish
          filters:
            branches:
              only: master
      - deploy_wordpress:
          requires:
            - publish
          filters:
            branches:
              only: master
